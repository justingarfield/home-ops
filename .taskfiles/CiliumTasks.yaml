---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALOS_OUT_DIR: '{{.ENV_OUTPUT_DIR}}/talos-linux'
  CILIUM_OUT_DIR: '{{.ENV_OUTPUT_DIR}}/cilium'

tasks:

  ##### Provisioning related tasks

  prepare-helm-manifest:
    internal: false
    desc: Prepares a Cilium CNI Helm manifest
    vars:
      CLUSTER_API_SERVER_PORT: '{{.CLUSTER_API_SERVER_PORT | default "6443"}}'
    cmds:
      - task: :_core:message
        vars: { MESSAGE: Ensuring Cilium Helm repository has been added... }
      - helm repo add cilium https://helm.cilium.io/ 1>/dev/null

      - task: :_core:message
        vars: { MESSAGE: Ensuring Cilium Helm repository is updated... }
      - helm repo update 1>/dev/null

      - task: :_core:message
        vars: { MESSAGE: Generating Cilium manifest using Helm template... }
      - |
        helm template \
            cilium \
            cilium/cilium \
            --version {{.CILIUM_VERSION}} \
            --namespace kube-system \
            --set ipam.mode=kubernetes \
            --set kubeProxyReplacement=strict \
            --set securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" \
            --set securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" \
            --set cgroup.autoMount.enabled=false \
            --set cgroup.hostRoot=/sys/fs/cgroup \
            --set k8sServiceHost="control-plane.{{.INTERNAL_DOMAIN}}" \
            --set k8sServicePort="{{.CLUSTER_API_SERVER_PORT}}" \
            --set bgpControlPlane.enabled=true \
            --set ingressController.enabled=true \
            --set ingressController.loadbalancerMode=shared \
            --set hubble.relay.enabled=true \
            --set hubble.ui.enabled=true \
            --set tunnelPort=6669 \
            --set=bpf.autoMount.enabled=false \
            > "{{.TALOS_OUT_DIR}}/cilium.yaml"

      - task: :_core:message
        vars: { MESSAGE: "Cilium manifest file was output to {{.TALOS_OUT_DIR}}/cilium.yaml" }

  apply-helm-manifest:
    desc: Applies the Cilium CNI Helm manifest to a particular Control Plane node
    vars:
      NODE_NAME: "{{.NODE_NAME}}"
    preconditions:
      - sh: test {{.NODE_NAME}}
        msg: Please provide a valid NODE_NAME
    cmds:
      - ./scripts/kubernetes/wait-for-node-notready.sh k8s-cp01 "{{.TALOS_OUT_DIR}}/kubeconfig"

      - task: :_core:message
        vars: { MESSAGE: Applying Cilium manifest to cluster... }
      - kubectl apply -f "{{.TALOS_OUT_DIR}}/cilium.yaml" --kubeconfig "{{.TALOS_OUT_DIR}}/kubeconfig" 1>/dev/null

      - task: :_core:message
        vars: { MESSAGE: Cilium manifest applied to cluster }

      - ./scripts/kubernetes/wait-for-node-ready.sh {{.NODE_NAME}} "{{.TALOS_OUT_DIR}}/kubeconfig"

      - task: :_core:message
        vars: { MESSAGE: 'Cilium CNI should now be running on {{.NODE_NAME}}' }


  ##### Maintenance/Ops related tasks

  status-verbose:
    desc: Uses the cilium binary in the DS for a verbose status
    cmds:
      - kubectl exec ds/cilium -n kube-system -- cilium status verbose

  get-endpoint-list:
    desc: Uses the cilium binary in the DS to query the endpoints list
    cmds:
      - kubectl -n kube-system exec ds/cilium -- cilium endpoint list

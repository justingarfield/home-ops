---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALOS_SRC_DIR: '{{.REPOSITORY_DIR}}/talos-linux'
  TALOS_OUT_DIR: '{{.OUTPUT_DIR}}/talos-linux'

tasks:

  generate-secrets-bundle-from-pki:
    desc: Generate a secrets bundle for a Talos environment using a pre-generated Single Root Intermediary CA
    vars:
      K8S_PKI_DIR: '{{.K8S_PKI_DIR}}'
      _BOOTSTRAP_TOKEN:
        sh: kubeadm token generate
      _OUTPUT_FILENAME: '{{.TALOS_OUT_DIR}}/secrets-bundle.yaml'
    preconditions:
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
      - sh: which kubeadm
        msg: The 'kubeadm' binary is required on the path to run this task'
      - sh: test '{{._BOOTSTRAP_TOKEN}}'
        msg: Issues using kubeadm to generate a bootstrap token _BOOTSTRAP_TOKEN
      - sh: test '{{.K8S_PKI_DIR}}'
        msg: Please provide a valid K8S_PKI_DIR
      - sh: test -d {{.K8S_PKI_DIR}}
        msg: Please provide a valid K8S_PKI_DIR ({{.K8S_PKI_DIR}} does not exist)
    cmds:
      - task: :_core:ensure-directory-exists
        vars: { DIRECTORY: '{{._OUTPUT_FILENAME | dir}}' }
      - talosctl gen secrets --from-kubernetes-pki "{{.K8S_PKI_DIR}}" --kubernetes-bootstrap-token {{._BOOTSTRAP_TOKEN}} --output-file "{{._OUTPUT_FILENAME}}"
    sources:
      - '{{.K8S_PKI_DIR}}'
      - '{{._BOOTSTRAP_TOKEN}}'
    generates:
      - '{{._OUTPUT_FILENAME}}'

  generate-machine-templates:
    desc: Generate Machine Templates for a particular cluster
    vars:
      CLUSTER_NAME: '{{.CLUSTER_NAME | default .ENVIRONMENT_NAME | lower}}'
      CONTROL_PLANE_HOSTNAME: '{{.CONTROL_PLANE_HOSTNAME | default "control-plane"}}'
      CLUSTER_DOMAIN: '{{.CLUSTER_DOMAIN | default .INTERNAL_DOMAIN}}'
      CLUSTER_API_SERVER_PORT: '{{.CLUSTER_API_SERVER_PORT | default "6443"}}'
      SECRETS_BUNDLE_FILENAME: '{{.TALOS_OUT_DIR}}/secrets-bundle.yaml'
      CLUSTER_LOAD_BALANCER_IP: '{{.CLUSTER_LOAD_BALANCER_IP}}'
      _MACHINE_TEMPLATES_DIR: '{{.TALOS_OUT_DIR}}/machine-templates'
    preconditions:
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
      - test {{.CLUSTER_NAME}}
      - test {{.CONTROL_PLANE_HOSTNAME}}
      - test {{.CLUSTER_DOMAIN}}
      - test {{.CLUSTER_API_SERVER_PORT}}
      - test {{.SECRETS_BUNDLE_FILENAME}}
      - test -f '{{.SECRETS_BUNDLE_FILENAME}}'
      - test {{.CLUSTER_LOAD_BALANCER_IP}}
    cmds:
      - task: :_core:ensure-directory-exists
        vars: { DIRECTORY: '{{._MACHINE_TEMPLATES_DIR}}' }
      - |
        talosctl gen config {{.CLUSTER_NAME}} https://{{.CONTROL_PLANE_HOSTNAME}}.{{.CLUSTER_DOMAIN}}:{{.CLUSTER_API_SERVER_PORT}} \
          --with-secrets {{.SECRETS_BUNDLE_FILENAME}} \
          --additional-sans {{.CONTROL_PLANE_HOSTNAME}},{{.CLUSTER_LOAD_BALANCER_IP}} \
          --install-image ghcr.io/siderolabs/installer:v1.4.5 \
          --kubernetes-version 1.27.2 \
          --talos-version v1.4.5 \
          --version v1alpha1 \
          --with-cluster-discovery=false \
          --with-docs=false \
          --with-examples=false \
          --config-patch='[{"op": "remove", "path": "/machine/certSANs"}]' \
          --config-patch-control-plane @{{.TALOS_SRC_DIR}}/cilium-opnsense-bgp-peering-policy.patch \
          --config-patch-control-plane @{{.TALOS_SRC_DIR}}/disable-cni-and-kube-proxy.patch \
          --config-patch-worker @{{.TALOS_SRC_DIR}}/disk-sdb.patch \
          --config-patch-worker @{{.TALOS_SRC_DIR}}/kubelet-unsafe-sysctls.patch \
          --config-patch-worker @{{.TALOS_SRC_DIR}}/label-worker-node.patch \
          --config-patch @{{.TALOS_SRC_DIR}}/machine-cert-sans.patch \
          --config-patch @{{.TALOS_SRC_DIR}}/registry-mirrors.patch \
          --config-patch='[{"op": "add", "path": "/machine/certSANs/-", "value": "{{.CLUSTER_LOAD_BALANCER_IP}}" }]' \
          --config-patch @{{.TALOS_SRC_DIR}}/system-disk-encryption.patch \
          --config-patch='[{"op": "replace", "path": "/machine/systemDiskEncryption/ephemeral/keys", "value": [{ "static": { "passphrase": "{{.EPHEMERAL_PASSPHRASE}}" }, "slot": 0 }] }]' \
          --output {{._MACHINE_TEMPLATES_DIR}}

  apply-machine-template:
    internal: true
    desc: Apply a machine-template to a particular cluster node
    vars:
      CLUSTER_NAME: "{{.CLUSTER_NAME}}"
      NODE_NAME: "{{.NODE_NAME}}"
      NODE_TYPE: "{{.NODE_TYPE}}"
      CLUSTER_DIR: "{{.TALOS_SRC_DIR}}/{{.CLUSTER_NAME}}-cluster"
    preconditions:
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
    cmds:
      - printf "[home-ops] Applying Talos machine-template to {{.NODE_TYPE}} node {{.NODE_NAME}}\n"
      - talosctl apply-config --insecure --nodes {{.NODE_NAME}}.{{.CLUSTER_DOMAIN}} --file {{.CLUSTER_DIR}}/machine-templates/{{.NODE_TYPE}}.yaml
      - printf "[home-ops] Applied Talos machine-template to {{.NODE_TYPE}} node {{.NODE_NAME}}\n"

  bootstrap-etcd:
    internal: false
    desc: Bootstraps etcd on a particular cluster's '-cp01' node
    vars:
      CLUSTER_NAME: "{{.CLUSTER_NAME}}"
    preconditions:
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
    cmds:
      - talosctl bootstrap --nodes k8s-cp01.{{.CLUSTER_DOMAIN}}

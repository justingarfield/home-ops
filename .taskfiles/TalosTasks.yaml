---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALOS_SRC_DIR: '{{.REPOSITORY_DIR}}/talos-linux'
  TALOS_OUT_DIR: '{{.ENV_OUTPUT_DIR}}/talos-linux'

tasks:

  ### Secrets Bundle / PKI related
  generate-secrets-bundle-from-pki:
    desc: Generate a secrets bundle for a Talos environment using a pre-generated Single Root Intermediary CA directory
    vars:
      K8S_PKI_DIR: '{{.K8S_PKI_DIR}}'
      _BOOTSTRAP_TOKEN:
        sh: kubeadm token generate
      _OUTPUT_FILENAME: '{{.TALOS_OUT_DIR}}/secrets-bundle.yaml'
    preconditions:
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
      - sh: which kubeadm
        msg: The 'kubeadm' binary is required on the path to run this task'
      - sh: test '{{._BOOTSTRAP_TOKEN}}'
        msg: Issues using kubeadm to generate a bootstrap token _BOOTSTRAP_TOKEN
      - sh: test '{{.K8S_PKI_DIR}}'
        msg: Please provide a valid K8S_PKI_DIR
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{._OUTPUT_FILENAME | dir}}' }
      - task: :_core:message
        vars: { MESSAGE: Generating secrets-bundle.yaml file... }
      - |
        talosctl gen secrets \
          --talos-version v1.5.1 \
          --from-kubernetes-pki "{{.K8S_PKI_DIR}}" \
          --kubernetes-bootstrap-token {{._BOOTSTRAP_TOKEN}} \
          --output-file "{{._OUTPUT_FILENAME}}" >/dev/null 2>&1
      - task: :_core:message
        vars: { MESSAGE: secrets-bundle.yaml file generated }
    sources:
      - '{{.K8S_PKI_DIR}}'
      - '{{._BOOTSTRAP_TOKEN}}'
    generates:
      - '{{._OUTPUT_FILENAME}}'

  ### Machine Config related
  generate-machine-configs:
    desc: Generate machine configs for a particular cluster
    vars:
      CLUSTER_NAME: '{{.CLUSTER_NAME | default .ENVIRONMENT_NAME | lower}}'
      CONTROL_PLANE_HOSTNAME: '{{.CONTROL_PLANE_HOSTNAME | default "control-plane"}}'
      CLUSTER_API_SERVER_PORT: '{{.CLUSTER_API_SERVER_PORT | default "6443"}}'
      SECRETS_BUNDLE_FILENAME: '{{.TALOS_OUT_DIR}}/secrets-bundle.yaml'
      CLUSTER_LOAD_BALANCER_IP: '{{.CLUSTER_LOAD_BALANCER_IP}}'
      ARCH: '{{.ARCH | default "amd64"}}'
    preconditions:
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
      - test {{.CLUSTER_NAME}}
      - test {{.CONTROL_PLANE_HOSTNAME}}
      - test {{.CLUSTER_API_SERVER_PORT}}
      - test {{.SECRETS_BUNDLE_FILENAME}}
      - test -f '{{.SECRETS_BUNDLE_FILENAME}}'
      - test {{.CLUSTER_LOAD_BALANCER_IP}}
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{.TALOS_OUT_DIR}}' }
      - task: :_core:message
        vars: { MESSAGE: Generating machine-config related files... }
      - |
        talosctl gen config {{.CLUSTER_NAME}} https://{{.CONTROL_PLANE_HOSTNAME}}.{{.INTERNAL_DOMAIN}}:{{.CLUSTER_API_SERVER_PORT}} \
          --force \
          --with-secrets {{.SECRETS_BUNDLE_FILENAME}} \
          --additional-sans {{.CLUSTER_LOAD_BALANCER_IP}} \
          --install-image ghcr.io/justingarfield/home-ops/talos-metal-{{.ARCH}}-installer:{{.TALOS_VERSION}} \
          --kubernetes-version 1.28.0 \
          --talos-version {{.TALOS_VERSION}} \
          --version v1alpha1 \
          --with-cluster-discovery=false \
          --with-docs=false \
          --with-examples=false \
          --config-patch-control-plane @{{.TALOS_SRC_DIR}}/cilium-opnsense-bgp-peering-policy.patch \
          --config-patch-control-plane @{{.TALOS_SRC_DIR}}/disable-cni-and-kube-proxy.patch \
          --config-patch-worker @{{.TALOS_SRC_DIR}}/kubelet-unsafe-sysctls.patch \
          --config-patch @{{.TALOS_SRC_DIR}}/machine-cert-sans.patch \
          --config-patch @{{.TALOS_SRC_DIR}}/registry-mirrors.patch \
          --config-patch @{{.TALOS_SRC_DIR}}/talos-extension-drbd.patch \
          --config-patch @{{.TALOS_SRC_DIR}}/system-disk-encryption.patch \
          --config-patch='[{"op": "replace", "path": "/machine/systemDiskEncryption/ephemeral/keys", "value": [{ "static": { "passphrase": "{{.EPHEMERAL_PASSPHRASE}}" }, "slot": 0 }] }]' \
          --output {{.TALOS_OUT_DIR}} >/dev/null 2>&1
      - mv "{{.TALOS_OUT_DIR}}/controlplane.yaml" "{{.TALOS_OUT_DIR}}/controlplane-{{.ARCH}}.yaml"
      - mv "{{.TALOS_OUT_DIR}}/worker.yaml" "{{.TALOS_OUT_DIR}}/worker-{{.ARCH}}.yaml"
      - task: :_core:message
        vars: { MESSAGE: machine-config related files generated }

  update-talosconfig-endpoints:
    desc: Updates a talosconfig file to have a non-loopback (127.0.0.1) IP address endpoint
    vars:
      TALOS_ENDPOINTS_HOSTNAME: '{{.TALOS_ENDPOINTS_HOSTNAME | default "talos-endpoints"}}'
    cmds:
      - talosctl config endpoint {{.TALOS_ENDPOINTS_HOSTNAME}}.{{.INTERNAL_DOMAIN}} --talosconfig "{{.TALOS_OUT_DIR}}/talosconfig"
      - task: :_core:message
        vars: { MESSAGE: 'Updated talosconfig endpoints to {{.TALOS_ENDPOINTS_HOSTNAME}}.{{.INTERNAL_DOMAIN}}' }

  apply-machine-template:
    internal: true
    desc: Apply a machine-template to a particular cluster node
    vars:
      NODE_NAME: "{{.NODE_NAME}}"
      NODE_TYPE: "{{.NODE_TYPE}}"
      ARCH: "{{.ARCH}}"
    preconditions:
      - sh: test {{.NODE_NAME}}
        msg: Please provide a valid NODE_NAME
      - sh: test {{.NODE_TYPE}}
        msg: Please provide a valid NODE_TYPE
      - sh: test {{.ARCH}}
        msg: Please provide a valid ARCH
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
    cmds:
      - ./scripts/talos/wait-for-talos-boot.sh {{.NODE_NAME}}.{{.INTERNAL_DOMAIN}}
      - task: :_core:message
        vars: { MESSAGE: "Applying Talos machine-template to {{.NODE_TYPE}} node {{.NODE_NAME}}" }
      - talosctl apply-config --insecure --nodes {{.NODE_NAME}}.{{.INTERNAL_DOMAIN}} --file {{.TALOS_OUT_DIR}}/{{.NODE_TYPE}}-{{.ARCH}}.yaml
      - task: :_core:message
        vars: { MESSAGE: "Successfully applied Talos machine-template to {{.NODE_TYPE}} node {{.NODE_NAME}}" }

  bootstrap-etcd:
    internal: false
    desc: Bootstraps etcd on a particular cluster's '-cp01' node
    vars:
      NODE_NAME: "{{.NODE_NAME}}"
    preconditions:
      - sh: test {{.NODE_NAME}}
        msg: Please provide a valid NODE_NAME
      - sh: which talosctl
        msg: The 'talosctl' binary is required on the path to run this task'
    cmds:
      - ./scripts/talos/wait-for-etcd-ready.sh {{.NODE_NAME}}.{{.INTERNAL_DOMAIN}} "{{.TALOS_OUT_DIR}}/talosconfig"
      - task: :_core:message
        vars: { MESSAGE: Issuing etcd bootstrap command... }
      - talosctl bootstrap --nodes {{.NODE_NAME}}.{{.INTERNAL_DOMAIN}} --talosconfig "{{.TALOS_OUT_DIR}}/talosconfig"
      - task: :_core:message
        vars: { MESSAGE: etcd bootstrap process has started }

  get-kubeconfig:
    desc: Retrieves the Talos cluster's administrative kubeconfig file for use with kubectl
    vars:
      NODE_NAME: "{{.NODE_NAME}}"
    preconditions:
      - sh: test {{.NODE_NAME}}
        msg: Please provide a valid NODE_NAME
    cmds:
      - talosctl kubeconfig "{{.TALOS_OUT_DIR}}/kubeconfig" --nodes {{.NODE_NAME}}.staging.home.arpa --talosconfig "{{.TALOS_OUT_DIR}}/talosconfig"
      - task: :_core:message
        vars: { MESSAGE: 'Retrieved and wrote kubeconfig file to {{.TALOS_OUT_DIR}}/kubeconfig' }

  ### Maintenance/Ops related
  etcd-db-snapshot:
    desc: Take a reguarly scheduled etcd database backup
    vars:
      IP_ADDRESS: '{{.IP_ADDRESS}}'
    cmds:
      - talosctl -n {{.IP_ADDRESS}} etcd snapshot db.snapshot

  ### Boot Assets related
  #
  # See also: .github/workflows/talos-build-assets.yaml

  build-custom-iso:
    desc: Builds Talos ISO boot asset w/ Intel ucode and DRBD extensions
    cmds:
      - |
        docker run --rm -t --privileged -v {{.TALOS_OUT_DIR}}:/out ghcr.io/siderolabs/imager:v1.5.1 iso \
          --system-extension-image ghcr.io/siderolabs/intel-ucode:20230808@sha256:f08b0d4d7f745419ddc9c79220788243940fb1a1a61638065fa4d137b9dcead2 \
          --system-extension-image ghcr.io/siderolabs/drbd:9.2.4-v1.5.1@sha256:70cf04c14847c21b40024c82c88623337514b70f6946913a4273b61432c78cf2

  build-custom-metal:
    desc: Builds Talos Metal boot asset w/ Intel ucode and DRBD extensions
    cmds:
      - |
        docker run --rm -t --privileged -v /dev:/dev -v {{.TALOS_OUT_DIR}}:/out ghcr.io/siderolabs/imager:v1.5.1 metal \
          --system-extension-image ghcr.io/siderolabs/intel-ucode:20230808@sha256:f08b0d4d7f745419ddc9c79220788243940fb1a1a61638065fa4d137b9dcead2 \
          --system-extension-image ghcr.io/siderolabs/drbd:9.2.4-v1.5.1@sha256:70cf04c14847c21b40024c82c88623337514b70f6946913a4273b61432c78cf2

  build-custom-installer:
    desc: Builds Talos Installer boot asset w/ Intel ucode and DRBD extensions
    cmds:
      - |
        docker run --rm -t --privileged -v {{.TALOS_OUT_DIR}}:/out ghcr.io/siderolabs/imager:v1.5.1 installer \
          --system-extension-image ghcr.io/siderolabs/intel-ucode:20230808@sha256:f08b0d4d7f745419ddc9c79220788243940fb1a1a61638065fa4d137b9dcead2 \
          --system-extension-image ghcr.io/siderolabs/drbd:9.2.4-v1.5.1@sha256:70cf04c14847c21b40024c82c88623337514b70f6946913a4273b61432c78cf2

  ### Tasks below here are disaster recovery related
  etcd-db-direct-copy:
    desc: Only use as a last-resort to get a snapshot (aka your cluster is beyond f**ked)
    vars:
      IP_ADDRESS: '{{.IP_ADDRESS}}'
    cmds:
      - talosctl -n {{.IP_ADDRESS}} cp /var/lib/etcd/member/snap/db .

  get-machine-configuration-raw:
    desc:
    vars:
      IP_ADDRESS: '{{.IP_ADDRESS}}'
    cmds:
      - talosctl -n {{.IP_ADDRESS}} get mc v1alpha1 -o yaml | yq eval '.spec' -

  query-machine-etcd-state:
    desc:
    vars:
      IP_ADDRESS: '{{.IP_ADDRESS}}'
    cmds:
      - talosctl -n {{.IP_ADDRESS}} etcd members
      - talosctl -n {{.IP_ADDRESS}} service etcd
      - talosctl -n {{.IP_ADDRESS}} get machinetype

  wipe-epehmeral-partition:
    desc:
    vars:
      IP_ADDRESS: '{{.IP_ADDRESS}}'
    cmds:
      - talosctl -n {{.IP_ADDRESS}} reset --graceful=false --reboot --system-labels-to-wipe=EPHEMERAL

  bootstrap-with-etcd-backup:
    desc:
    vars:
      IP_ADDRESS: '{{.IP_ADDRESS}}'
    cmds:
      - talosctl -n {{.IP_ADDRESS}} bootstrap --recover-from=./db.snapshot

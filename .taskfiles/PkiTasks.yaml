---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  PKI_SRC_DIR: '{{.REPOSITORY_DIR}}/pki'
  PKI_OUT_DIR: '{{.ENV_OUTPUT_DIR}}/pki'
  CFSSL_PROFILES: '{{.PKI_SRC_DIR}}/cfssl-profiles.json'
  CFSSL_TEMPLATES: '{{.PKI_SRC_DIR}}/cfssl-templates'
  CFSSL_LOG_LEVEL: '{{.CFSSL_LOG_LEVEL | default 2}}' # Set to 1 to see INFO output from cfssl
  _CFSSL_BLANK_TEMPLATE: '{ "key": { "algo": "rsa", "size": 4096 } }'

tasks:

  generate-ca:
    desc: Generates a new Certificate Authority (CA) with cfssl using a pre-defined JSON template
    vars:
      CSR_TEMPLATE_FILENAME: '{{.CFSSL_TEMPLATES}}/{{.CSR_TEMPLATE_FILENAME | default "root-ca-csr.json" }}'
      ORGANIZATION_NAME: '{{.ORGANIZATION_NAME}}'
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME | default .ORGANIZATION_NAME | lower | replace "(" "" | replace ")" "" | replace " " "-" | replace "." ""}}'
      ORGANIZATION_ADMINISTRATIVE_EMAIL: '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
      ORGANIZATION_LOCATION: '{{.ORGANIZATION_LOCATION}}'
      ORGANIZATION_STATE_PROVINCE_CODE: '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
      ORGANIZATION_COUNTRY_CODE: '{{.ORGANIZATION_COUNTRY_CODE}}'
      INTERMEDIARY_NAME: '{{.INTERMEDIARY_NAME | default " "}}' # Optional
      CERT_CN: '{{.CERT_CN | default " "}}' # Optional
      ENVIRONMENT_NAME: '{{.ENVIRONMENT_NAME | default " "}}' # Optional
      _YQ_TOKENIZATION: | # https://stackoverflow.com/questions/70032588/use-yq-to-substitute-string-in-a-yaml-file
        (.. | select(tag == "!!str")) |= sub("<ORGANIZATION_COUNTRY_CODE>", "{{.ORGANIZATION_COUNTRY_CODE}}")
        | (.. | select(tag == "!!str")) |= sub("<ORGANIZATION_STATE_PROVINCE_CODE>", "{{.ORGANIZATION_STATE_PROVINCE_CODE}}")
        | (.. | select(tag == "!!str")) |= sub("<ORGANIZATION_LOCATION>", "{{.ORGANIZATION_LOCATION}}")
        | (.. | select(tag == "!!str")) |= sub("<ORGANIZATION_NAME>", "{{.ORGANIZATION_NAME}}")
        | (.. | select(tag == "!!str")) |= sub("<ORGANIZATION_ADMINISTRATIVE_EMAIL>", "{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}")
        | (.. | select(tag == "!!str")) |= sub("<INTERMEDIARY_NAME>", "{{.INTERMEDIARY_NAME}}")
        | (.. | select(tag == "!!str")) |= sub("<CERT_CN>", "{{.CERT_CN}}")
        | (.. | select(tag == "!!str")) |= sub("<ENVIRONMENT_NAME>", "{{.ENVIRONMENT_NAME}}")
    preconditions:
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE
      - sh: test -f '{{.CSR_TEMPLATE_FILENAME}}'
        msg: Please provide a valid CSR_TEMPLATE_FILENAME ({{.CSR_TEMPLATE_FILENAME}} does not exist)
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{.OUTPUT_FILENAME | dir}}' }
      - |
        yq eval '{{._YQ_TOKENIZATION}}' '{{.CSR_TEMPLATE_FILENAME}}' --output-format=json \
          | cfssl gencert -initca=true -loglevel={{.CFSSL_LOG_LEVEL}} - \
          | cfssljson -bare '{{.OUTPUT_FILENAME}}'
      - task: :_core:message
        vars: { MESSAGE: 'Certificate Authority CSR created.................... {{.OUTPUT_FILENAME}}.csr' }
      - task: :_core:message
        vars: { MESSAGE: 'Certificate Authority Public key created............. {{.OUTPUT_FILENAME}}.pem' }
      - task: :_core:message
        vars: { MESSAGE: 'Certificate Authority Private key created............ {{.OUTPUT_FILENAME}}-key.pem' }

  sign-intermediate-ca:
    internal: true
    desc: Signs an Intermediate Certificate Authority (CA) using cfssl
    vars:
      SIGNING_KEY_FILENAME: '{{.SIGNING_KEY_FILENAME}}'
      INTERMEDIATE_CA_FILENAME: '{{.INTERMEDIATE_CA_FILENAME}}'
      OUTPUT_FILENAME: '{{.OUTPUT_FILENAME}}'
      _SIGNING_KEY_FILENAME: '{{.PKI_OUT_DIR}}/{{.SIGNING_KEY_FILENAME}}'
      _INTERMEDIATE_CA_FILENAME: '{{.PKI_OUT_DIR}}/{{.INTERMEDIATE_CA_FILENAME}}'
    cmds:
      - |
        cfssl sign -loglevel={{.CFSSL_LOG_LEVEL}} -ca "{{._SIGNING_KEY_FILENAME}}.pem" -ca-key "{{._SIGNING_KEY_FILENAME}}-key.pem" \
          -config "{{.CFSSL_PROFILES}}" -profile intermediate-ca "{{._INTERMEDIATE_CA_FILENAME}}.csr" \
          | cfssljson -bare "{{._INTERMEDIATE_CA_FILENAME}}"
      - task: :_core:message
        vars: { MESSAGE: 'Intermediate Certificate Authority signed............ {{._INTERMEDIATE_CA_FILENAME}}' }

  generate-and-sign-intermediate-ca:
    desc: Generates and Signs an Intermediate Certificate Authority (CA) using cfssl
    vars:
      CSR_TEMPLATE_FILENAME: '{{.CSR_TEMPLATE_FILENAME | default "default-intermediate-ca-csr.json"}}'
      OUTPUT_FILENAME: '{{.OUTPUT_FILENAME}}'
      SIGNING_KEY_FILENAME: '{{.SIGNING_KEY_FILENAME | default .ORGANIZATION_NAME | lower | replace "(" "" | replace ")" "" | replace " " "-" | replace "." ""}}'
      INTERMEDIARY_NAME: '{{.INTERMEDIARY_NAME | default " "}}' # Optional
      CERT_CN: '{{.CERT_CN | default " "}}' # Optional
      ENVIRONMENT_NAME: '{{.ENVIRONMENT_NAME | default " "}}' # Optional
    preconditions:
      - sh: test -f '{{.CFSSL_TEMPLATES}}/{{.CSR_TEMPLATE_FILENAME}}'
        msg: Please provide a valid CSR_TEMPLATE_FILENAME ({{.CSR_TEMPLATE_FILENAME}} does not exist)
      - sh: test '{{.OUTPUT_FILENAME}}'
        msg: Please provide a valid OUTPUT_FILENAME
    cmds:
      - task: generate-ca
        vars: { CSR_TEMPLATE_FILENAME: "{{.CSR_TEMPLATE_FILENAME}}", OUTPUT_FILENAME: "{{.OUTPUT_FILENAME}}", INTERMEDIARY_NAME: "{{.INTERMEDIARY_NAME}}", CERT_CN: "{{.CERT_CN}}", ENVIRONMENT_NAME: "{{.ENVIRONMENT_NAME}}" }
      - task: sign-intermediate-ca
        vars: { SIGNING_KEY_FILENAME: "{{.SIGNING_KEY_FILENAME}}", INTERMEDIATE_CA_FILENAME: "{{.OUTPUT_FILENAME}}" }

  generate-k8s-service-account-key:
    desc: Generates a Public/Private key-pair for a Kubernetes Service Account.
    vars:
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.OUTPUT_FILENAME}}'
        msg: Please provide a valid OUTPUT_FILENAME
    cmds:
      # Note: With Talos Linux's 'talosconfig' file, you won't need the public 'sa.pub' file
      - echo '{{._CFSSL_BLANK_TEMPLATE}}' | cfssl genkey -loglevel={{.CFSSL_LOG_LEVEL}} - | yq .key > "{{.OUTPUT_FILENAME}}.key"
      - task: :_core:message
        vars: { MESSAGE: 'Kubernetes Service Account key created............... {{.OUTPUT_FILENAME}}.key' }

  generate-server-certificate:
    desc: Generates a Server Certificate.
    vars:
      CERT_CN: '{{.CERT_CN}}'
      SERVER_NAME: '{{.SERVER_NAME}}'
      SERVER_IP: '{{.SERVER_IP}}'
      SIGNING_KEY_FILENAME: '{{.SIGNING_KEY_FILENAME}}'
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME}}'
      _CSR_FILENAME: '{{.OUTPUT_FILENAME}}.csr'
      _PUBLIC_KEY_FILENAME: '{{.OUTPUT_FILENAME}}.pem'
      _PRIVATE_KEY_FILENAME: '{{.OUTPUT_FILENAME}}-key.pem'
    preconditions:
      - sh: test '{{ .ORGANIZATION_NAME }}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{ .CERT_CN }}'
        msg: Please provide a valid CERT_CN
      - sh: test '{{ .SERVER_NAME }}'
        msg: Please provide a valid SERVER_NAME
      - sh: test '{{ .SERVER_IP }}'
        msg: Please provide a valid SERVER_IP
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: "{{.OUTPUT_FILENAME | dir}}" }
      - |
        yq eval '{{._YQ_TOKENIZATION}}' "{{.CFSSL_TEMPLATES}}/server-certificate-csr.json" --output-format=json \
          | cfssl gencert -loglevel={{.CFSSL_LOG_LEVEL}} -ca "{{.PKI_OUT_DIR}}/{{.SIGNING_KEY_FILENAME}}.pem" -ca-key "{{.PKI_OUT_DIR}}/{{.SIGNING_KEY_FILENAME}}-key.pem" \
            -config "{{.CFSSL_PROFILES}}" -profile=server - \
          | cfssljson -bare "{{.OUTPUT_FILENAME}}"
      - task: :_core:message
        vars: { MESSAGE: 'Server Certificate CSR created....................... {{._CSR_FILENAME}}' }
      - task: :_core:message
        vars: { MESSAGE: 'Server Certificate Public key created................ {{._PUBLIC_KEY_FILENAME}}' }
      - task: :_core:message
        vars: { MESSAGE: 'Server Certificate Private key created............... {{._PRIVATE_KEY_FILENAME}}' }

  generate-client-certificate:
    desc: Generates a Client Certificate at the Root of the PKI (Global)
    vars:
      ORGANIZATION_NAME: '{{ .ORGANIZATION_NAME }}'
      CERT_CN: '{{ .CERT_CN }}'
      SIGNING_KEY_FILENAME: '{{.SIGNING_KEY_FILENAME}}'
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.CERT_CN}}'
        msg: Please provide a valid CERT_CN
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: "{{.OUTPUT_FILENAME | dir}}" }
      - |
        yq eval '{{._YQ_TOKENIZATION}}' "{{.CFSSL_TEMPLATES}}/client-certificate-csr.json" --output-format=json \
          | cfssl gencert -loglevel={{.CFSSL_LOG_LEVEL}} -ca "{{.PKI_OUT_DIR}}/{{.SIGNING_KEY_FILENAME}}.pem" -ca-key "{{.PKI_OUT_DIR}}/{{.SIGNING_KEY_FILENAME}}-key.pem" \
            -config "{{.CFSSL_PROFILES}}" -profile=client - \
          | cfssljson -bare "{{.OUTPUT_FILENAME}}"
      - task: :_core:message
        vars: { MESSAGE: 'Client Certificate CSR created....................... {{.OUTPUT_FILENAME}}.csr' }
      - task: :_core:message
        vars: { MESSAGE: 'Client Certificate Public key created................ {{.OUTPUT_FILENAME}}.pem' }
      - task: :_core:message
        vars: { MESSAGE: 'Client Certificate Private key created............... {{.OUTPUT_FILENAME}}-key.pem' }

  prepare-k8s-directory:
    desc: Moves cfssl-generated key files to the proper naming that Kubernetes expects in its PKI folders
    vars:
      KUBERNETES_PKI_DIR: '{{.KUBERNETES_PKI_DIR | default "kubernetes"}}'
      _KUBERNETES_PKI_DIR: '{{.PKI_OUT_DIR}}/{{.KUBERNETES_PKI_DIR}}'
    cmds:
      - task: :_core:message
        vars: { MESSAGE: Fixing up Kubernetes PKI folder to prep for talosctl consumption..., LINEBREAK: true }
      - mv {{._KUBERNETES_PKI_DIR}}/etcd/ca-key.pem {{._KUBERNETES_PKI_DIR}}/etcd/ca.key
      - mv {{._KUBERNETES_PKI_DIR}}/etcd/ca.pem {{._KUBERNETES_PKI_DIR}}/etcd/ca.crt
      - mv {{._KUBERNETES_PKI_DIR}}/ca-key.pem {{._KUBERNETES_PKI_DIR}}/ca.key
      - mv {{._KUBERNETES_PKI_DIR}}/ca.pem {{._KUBERNETES_PKI_DIR}}/ca.crt
      - mv {{._KUBERNETES_PKI_DIR}}/front-proxy-ca-key.pem {{._KUBERNETES_PKI_DIR}}/front-proxy-ca.key
      - mv {{._KUBERNETES_PKI_DIR}}/front-proxy-ca.pem {{._KUBERNETES_PKI_DIR}}/front-proxy-ca.crt
      - task: :_core:message
        vars: { MESSAGE: Kubernetes PKI folder ready for talosctl consumption\n }

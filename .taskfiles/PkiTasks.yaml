---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  PKI_SRC_DIR: '{{.REPOSITORY_DIR}}/pki'
  PKI_OUT_DIR: '{{.ENV_OUTPUT_DIR}}/pki'
  PKI_ROOT_OUTPUT_DIR: '{{.ROOT_OUTPUT_DIR}}/pki'

###########
### YEAHHHH....This file needs a refactoring...go with it for now...LOL
###########

tasks:

  generate-root-ca:
    desc: Generates a new Root Certificate Authority (CA) with cfssl using a pre-defined JSON template
    vars:
      OUTPUT_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME in a .env file
      - sh: test '{{.ENVIRONMENT_NAME}}'
        msg: Please provide a valid ENVIRONMENT_NAME in a .env file
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL in a .env file
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION in a .env file
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE in a .env file
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE in a .env file
    cmds:
      - echo {{.OUTPUT_FILENAME | dir}}
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{.OUTPUT_FILENAME | dir}}' }
      - |
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-root-ca.bash \
          --ORGANIZATION_ADMINISTRATIVE_EMAIL {{.ORGANIZATION_ADMINISTRATIVE_EMAIL}} \
          --ORGANIZATION_NAME "{{.ORGANIZATION_NAME}}" \
          --ORGANIZATION_LOCATION "{{.ORGANIZATION_LOCATION}}" \
          --ORGANIZATION_STATE_PROVINCE_CODE "{{.ORGANIZATION_STATE_PROVINCE_CODE}}" \
          --ORGANIZATION_COUNTRY_CODE "{{.ORGANIZATION_COUNTRY_CODE}}"

  generate-intermediate-ca:
    desc: Generates a new Intermediate Certificate Authority (CA) using an existing Root CA with cfssl and a pre-defined JSON template
    vars:
      OUTPUT_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.INTERMEDIARY_NAME}}'
        msg: Please provide a valid INTERMEDIARY_NAME
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{.OUTPUT_FILENAME | dir}}' }
      - |
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-generic-intermediate-ca.bash \
          --INTERMEDIARY_NAME "{{.INTERMEDIARY_NAME}}" \
          --ORGANIZATION_ADMINISTRATIVE_EMAIL {{.ORGANIZATION_ADMINISTRATIVE_EMAIL}} \
          --ORGANIZATION_NAME "{{.ORGANIZATION_NAME}}" \
          --ORGANIZATION_LOCATION "{{.ORGANIZATION_LOCATION}}" \
          --ORGANIZATION_STATE_PROVINCE_CODE "{{.ORGANIZATION_STATE_PROVINCE_CODE}}" \
          --ORGANIZATION_COUNTRY_CODE "{{.ORGANIZATION_COUNTRY_CODE}}"

  generate-environment-specific-intermediate-ca:
    desc: Generates a new Environment-specific Intermediate Certificate Authority (CA) using an existing Root CA with cfssl and a pre-defined JSON template
    vars:
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.ENVIRONMENT_NAME}}'
        msg: Please provide a valid ENVIRONMENT_NAME
      - sh: test '{{.INTERMEDIARY_NAME}}'
        msg: Please provide a valid INTERMEDIARY_NAME
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{.OUTPUT_FILENAME | dir}}' }
      - |
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-environment-intermediate-ca.bash \
          --ENVIRONMENT_NAME "{{.ENVIRONMENT_NAME}}" \
          --INTERMEDIARY_NAME "{{.INTERMEDIARY_NAME}}" \
          --ORGANIZATION_ADMINISTRATIVE_EMAIL {{.ORGANIZATION_ADMINISTRATIVE_EMAIL}} \
          --ORGANIZATION_NAME "{{.ORGANIZATION_NAME}}" \
          --ORGANIZATION_LOCATION "{{.ORGANIZATION_LOCATION}}" \
          --ORGANIZATION_STATE_PROVINCE_CODE "{{.ORGANIZATION_STATE_PROVINCE_CODE}}" \
          --ORGANIZATION_COUNTRY_CODE "{{.ORGANIZATION_COUNTRY_CODE}}"

  generate-kubernetes-intermediate-ca:
    desc: Generates a new Intermediate Certificate Authority (CA) for Kubernetes using an existing Root CA with cfssl and a pre-defined JSON template
    vars:
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.ENVIRONMENT_NAME}}'
        msg: Please provide a valid ENVIRONMENT_NAME
      - sh: test '{{.CERT_CN}}'
        msg: Please provide a valid CERT_CN
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: '{{.OUTPUT_FILENAME | dir}}' }
      - |
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-kubernetes-intermediate-ca.bash \
          --ENVIRONMENT_NAME "{{.ENVIRONMENT_NAME}}" \
          --CERT_CN "{{.CERT_CN}}" \
          --ORGANIZATION_ADMINISTRATIVE_EMAIL {{.ORGANIZATION_ADMINISTRATIVE_EMAIL}} \
          --ORGANIZATION_NAME "{{.ORGANIZATION_NAME}}" \
          --ORGANIZATION_LOCATION "{{.ORGANIZATION_LOCATION}}" \
          --ORGANIZATION_STATE_PROVINCE_CODE "{{.ORGANIZATION_STATE_PROVINCE_CODE}}" \
          --ORGANIZATION_COUNTRY_CODE "{{.ORGANIZATION_COUNTRY_CODE}}"

  sign-intermediate-ca:
    desc: Signs an Intermediate Certificate Authority (CA) using cfssl and an existing parent CA
    vars:
      SIGNING_KEY_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.SIGNING_KEY_FILENAME}}'
      INTERMEDIATE_CA_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.INTERMEDIATE_CA_FILENAME}}'
    cmds:
      - |
        SIGNING_PUBLIC_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}.pem" \
        SIGNING_PRIVATE_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}-key.pem" \
        INTERMEDIATE_CA_FILENAME="{{.INTERMEDIATE_CA_FILENAME}}" \
        ./scripts/pki/sign-intermediate-ca.bash

  sign-environment-specific-intermediate-ca:
    desc: Signs an Intermediate Certificate Authority (CA) using cfssl and an existing parent CA
    vars:
      SIGNING_KEY_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.SIGNING_KEY_FILENAME}}'
      INTERMEDIATE_CA_FILENAME: '{{.PKI_OUT_DIR}}/{{.INTERMEDIATE_CA_FILENAME}}'
    cmds:
      - |
        SIGNING_PUBLIC_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}.pem" \
        SIGNING_PRIVATE_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}-key.pem" \
        INTERMEDIATE_CA_FILENAME="{{.INTERMEDIATE_CA_FILENAME}}" \
        ./scripts/pki/sign-intermediate-ca.bash

  sign-kubernetes-intermediate-ca:
    desc: Signs an Intermediate Certificate Authority (CA) using cfssl and an existing parent CA
    vars:
      SIGNING_KEY_FILENAME: '{{.PKI_OUT_DIR}}/{{.SIGNING_KEY_FILENAME}}'
      INTERMEDIATE_CA_FILENAME: '{{.PKI_OUT_DIR}}/{{.INTERMEDIATE_CA_FILENAME}}'
    cmds:
      - |
        SIGNING_PUBLIC_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}.pem" \
        SIGNING_PRIVATE_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}-key.pem" \
        INTERMEDIATE_CA_FILENAME="{{.INTERMEDIATE_CA_FILENAME}}" \
        ./scripts/pki/sign-intermediate-ca.bash

  generate-k8s-service-account-key:
    desc: Generates a stand-alone key for Kubernetes Service Account usage
    vars:
      OUTPUT_FILENAME: '{{.PKI_OUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.OUTPUT_FILENAME}}'
        msg: Please provide a valid OUTPUT_FILENAME
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: "{{.OUTPUT_FILENAME | dir}}" }
      - |
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-k8s-service-account-key.bash

  generate-server-certificate:
    desc: Generates a Server Certificate.
    vars:
      SIGNING_KEY_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.SIGNING_KEY_FILENAME}}'
      CERT_CN: '{{.CERT_CN}}'
      SERVER_NAME: '{{.SERVER_NAME}}'
      SERVER_IP: '{{.SERVER_IP}}'
      OUTPUT_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.SIGNING_KEY_FILENAME}}'
        msg: Please provide a valid SIGNING_KEY_FILENAME
      - sh: test '{{.CERT_CN}}'
        msg: Please provide a valid CERT_CN
      - sh: test '{{.SERVER_NAME}}'
        msg: Please provide a valid SERVER_NAME
      - sh: test '{{.SERVER_IP}}'
        msg: Please provide a valid SERVER_IP
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: "{{.OUTPUT_FILENAME | dir}}" }
      - |
        SIGNING_PUBLIC_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}.pem" \
        SIGNING_PRIVATE_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}-key.pem" \
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-server-certificate.bash \
          --CERT_CN "{{.CERT_CN}}" \
          --SERVER_NAME {{.SERVER_NAME}} \
          --SERVER_IP {{.SERVER_IP}} \
          --ORGANIZATION_ADMINISTRATIVE_EMAIL {{.ORGANIZATION_ADMINISTRATIVE_EMAIL}} \
          --ORGANIZATION_NAME "{{.ORGANIZATION_NAME}}" \
          --ORGANIZATION_LOCATION "{{.ORGANIZATION_LOCATION}}" \
          --ORGANIZATION_STATE_PROVINCE_CODE "{{.ORGANIZATION_STATE_PROVINCE_CODE}}" \
          --ORGANIZATION_COUNTRY_CODE "{{.ORGANIZATION_COUNTRY_CODE}}" \
          --EXTRA_SAN "{{.EXTRA_SAN}}"

  generate-client-certificate:
    desc: Generates a Client Certificate at the PKI Root (Global)
    vars:
      SIGNING_KEY_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.SIGNING_KEY_FILENAME}}'
      CERT_CN: '{{.CERT_CN}}'
      OUTPUT_FILENAME: '{{.PKI_ROOT_OUTPUT_DIR}}/{{.OUTPUT_FILENAME}}'
    preconditions:
      - sh: test '{{.SIGNING_KEY_FILENAME}}'
        msg: Please provide a valid SIGNING_KEY_FILENAME
      - sh: test '{{.CERT_CN}}'
        msg: Please provide a valid CERT_CN
      - sh: test '{{.ORGANIZATION_ADMINISTRATIVE_EMAIL}}'
        msg: Please provide a valid ORGANIZATION_ADMINISTRATIVE_EMAIL
      - sh: test '{{.ORGANIZATION_NAME}}'
        msg: Please provide a valid ORGANIZATION_NAME
      - sh: test '{{.ORGANIZATION_LOCATION}}'
        msg: Please provide a valid ORGANIZATION_LOCATION
      - sh: test '{{.ORGANIZATION_STATE_PROVINCE_CODE}}'
        msg: Please provide a valid ORGANIZATION_STATE_PROVINCE_CODE
      - sh: test '{{.ORGANIZATION_COUNTRY_CODE}}'
        msg: Please provide a valid ORGANIZATION_COUNTRY_CODE
    cmds:
      - task: :_core:ensure-directory-exists2
        vars: { DIRECTORY: "{{.OUTPUT_FILENAME | dir}}" }
      - |
        SIGNING_PUBLIC_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}.pem" \
        SIGNING_PRIVATE_KEY_FILENAME="{{.SIGNING_KEY_FILENAME}}-key.pem" \
        OUTPUT_FILENAME="{{.OUTPUT_FILENAME}}" \
        ./scripts/pki/generate-client-certificate.bash \
          --CERT_CN "{{.CERT_CN}}" \
          --ORGANIZATION_ADMINISTRATIVE_EMAIL {{.ORGANIZATION_ADMINISTRATIVE_EMAIL}} \
          --ORGANIZATION_NAME "{{.ORGANIZATION_NAME}}" \
          --ORGANIZATION_LOCATION "{{.ORGANIZATION_LOCATION}}" \
          --ORGANIZATION_STATE_PROVINCE_CODE "{{.ORGANIZATION_STATE_PROVINCE_CODE}}" \
          --ORGANIZATION_COUNTRY_CODE "{{.ORGANIZATION_COUNTRY_CODE}}"

  prepare-k8s-directory:
    desc: Moves cfssl-generated key files to the proper naming that Kubernetes expects in its PKI folders
    vars:
      KUBERNETES_PKI_DIR: '{{.PKI_OUT_DIR}}/kubernetes'
    preconditions:
      - sh: test '{{.KUBERNETES_PKI_DIR}}'
        msg: Please provide a valid KUBERNETES_PKI_DIR
      - sh: test -d '{{.KUBERNETES_PKI_DIR}}'
        msg: Provided KUBERNETES_PKI_DIR does not exist ({{.KUBERNETES_PKI_DIR}})
    cmds:
      - |
        KUBERNETES_PKI_DIR="{{.KUBERNETES_PKI_DIR}}" \
        ./scripts/pki/prepare-k8s-directory.bash
